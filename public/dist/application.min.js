"use strict";function RepliesController($scope,$state,Authentication,Replies,RecursionHelper){var vm=this;vm.authentication=Authentication,vm.postId=$state.params.postId,vm.topReply={},vm.topReplyCollapsed=!0,vm.topReplyAvailable=Authentication.user,vm.showReplyForm=function(replyId){vm.currentReplyId=replyId},vm.cancelReply=function(){vm.currentReplyId=null},vm.prepareDelete=function(replyId){vm.replyToDelete=replyId},vm.cancelDelete=function(){vm.replyToDelete=null},vm.prepareEdit=function(reply){reply.newContent=reply.content,vm.replyToEdit=reply._id},vm.cancelEdit=function(){vm.replyToEdit=null},vm.cancelTopReply=function(){vm.topReply.content=""},vm.createTop=function(){var postId=vm.postId;vm.topReply.error=null;var newTopReply=vm.topReply,reply=new Replies(newTopReply);reply.post=postId,reply.nestedLevel=1,reply.$save(function(response){vm.replies.unshift(response),vm.topReply={},vm.topReplyAvailable=!1},function(errorResponse){vm.topReply.error=errorResponse.data.message})},vm.create=function(currentReply){if(currentReply.error=null,!currentReply.newReply)return currentReply.error="The reply was empty!",!1;var newReplyLevel=currentReply.nestedLevel+1;if(newReplyLevel>9)return currentReply.error="how the hell did you do that?",!1;var reply=new Replies({content:currentReply.newReply,post:currentReply.post,replyTo:currentReply._id,nestedLevel:newReplyLevel});reply.$save(function(response){currentReply.replies.unshift(response),currentReply.newReply="",vm.currentReplyId=null},function(errorResponse){currentReply.error=errorResponse.data.message})},vm.remove=function(reply){if(reply){var deadManWalking=new Replies(reply);deadManWalking.$remove({},function(value){reply.isDeleted=!0},function(error){reply.error=error.data.message})}},vm.update=function(currentReply){if(currentReply.error=null,!currentReply.newContent)return currentReply.error="The reply was empty!",!1;if(currentReply.newContent===currentReply.content)return currentReply.error="You did not change anything!",!1;var reply=new Replies(currentReply);reply.content=currentReply.newContent,reply.$update(function(response){currentReply.content=response.content,currentReply.edited=response.edited,vm.replyToEdit=null},function(errorResponse){currentReply.error=errorResponse.data.message})},vm.find=function(){var postId=$state.params.postId;Replies.query({post:postId},function(response){vm.replies=response,vm.isCollapsed={},angular.forEach(vm.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!0,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1,angular.forEach(reply.replies,function(reply){vm.isCollapsed[reply._id]=!1})})})})})})})})})})}}var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","angularMoment","ngAnimate","ngSanitize","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){if("guest"===role||Authentication.user&&void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(role)!==-1)return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(app){app.registerModule("chat"),app.registerModule("chat.routes",["ui.router"])}(ApplicationConfiguration),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("posts")}(ApplicationConfiguration),function(app){app.registerModule("profiles")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("replies"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}angular.module("chat").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",controller:"ChatController",controllerAs:"vm",data:{roles:["user","admin"]}})}angular.module("chat.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function ChatController($scope,$state,Authentication,Socket){function init(){Authentication.user||$state.go("home"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){vm.messages.unshift(message)}),$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}function sendMessage(){var message={text:vm.messageText};Socket.emit("chatMessage",message),vm.messageText=""}var vm=this;vm.messages=[],vm.messageText="",vm.sendMessage=sendMessage,init()}angular.module("chat").controller("ChatController",ChatController),ChatController.$inject=["$scope","$state","Authentication","Socket"]}(),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),function(){function MenuConfig(Menus){Menus.addMenu("account",{roles:["user"]}),Menus.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),Menus.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"}),Menus.addSubMenuItem("account","settings",{title:"Manage Social Accounts",state:"settings.accounts"})}angular.module("core").run(MenuConfig),MenuConfig.$inject=["Menus"]}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.accountMenu=Menus.getMenu("account").items[0],$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector","Authentication",function($q,$injector,Authentication){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Posts",state:"posts",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","posts",{title:"List Posts",state:"posts.list"}),Menus.addSubMenuItem("topbar","posts",{title:"Create Post",state:"posts.create",roles:["user"]})}angular.module("posts").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("posts",{abstract:!0,url:"/posts",template:"<ui-view/>"}).state("posts.list",{url:"",templateUrl:"modules/posts/client/views/list-posts.client.view.html",controller:"PostsListController",controllerAs:"vm",data:{pageTitle:"Posts List"}}).state("posts.create",{url:"/create",templateUrl:"modules/posts/client/views/form-post.client.view.html",controller:"PostsController",controllerAs:"vm",resolve:{postResolve:newPost},data:{roles:["user","admin"],pageTitle:"Posts Create"}}).state("posts.edit",{url:"/:postId/edit",templateUrl:"modules/posts/client/views/form-post.client.view.html",controller:"PostsController",controllerAs:"vm",resolve:{postResolve:getPost},data:{roles:["user","admin"],pageTitle:"Edit Post {{ postResolve.name }}"}}).state("posts.view",{url:"/:postId",views:{"@":{templateUrl:"modules/posts/client/views/view-post.client.view.html",controller:"PostsController",controllerAs:"vm",resolve:{postResolve:getPost}},"replies@posts.view":{templateUrl:"modules/replies/client/views/list-replies.client.view.html",controller:"RepliesController",controllerAs:"vm"}}})}function getPost($stateParams,PostsService){return PostsService.get({postId:$stateParams.postId}).$promise}function newPost(PostsService){return new PostsService}angular.module("posts").config(routeConfig),routeConfig.$inject=["$stateProvider"],getPost.$inject=["$stateParams","PostsService"],newPost.$inject=["PostsService"]}(),function(){function PostsListController(PostsService){var vm=this;vm.posts=PostsService.query()}angular.module("posts").controller("PostsListController",PostsListController),PostsListController.$inject=["PostsService"]}(),function(){function PostsController($scope,$state,$window,Authentication,post){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.post.$remove($state.go("posts.list"))}function save(isValid){function successCallback(res){$state.go("posts.view",{postId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.post._id?vm.post.$update(successCallback,errorCallback):vm.post.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.postForm"),!1)}var vm=this;vm.authentication=Authentication,vm.post=post,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("posts").controller("PostsController",PostsController),PostsController.$inject=["$scope","$state","$window","Authentication","postResolve"]}(),function(){function PostsService($resource){return $resource("api/posts/:postId",{postId:"@_id"},{update:{method:"PUT"}})}angular.module("posts").factory("PostsService",PostsService),PostsService.$inject=["$resource"]}(),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Profiles",state:"profiles",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","profiles",{title:"Create Profile",state:"profiles.create"}),Menus.addSubMenuItem("topbar","profiles",{title:"List Profiles",state:"profiles.list",roles:["user"]})}angular.module("profiles").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("profiles",{abstract:!0,url:"/profiles",template:"<ui-view/>"}).state("profiles.list",{url:"",templateUrl:"modules/profiles/client/views/list-profiles.client.view.html",controller:"ProfilesListController",controllerAs:"vm",data:{pageTitle:"Profiles List"}}).state("profiles.create",{url:"/create",templateUrl:"modules/profiles/client/views/form-profile.client.view.html",controller:"ProfilesController",controllerAs:"vm",resolve:{profileResolve:newProfile},data:{roles:["user","admin"],pageTitle:"Profiles Create"}}).state("profiles.edit",{url:"/:profileId/edit",templateUrl:"modules/profiles/client/views/form-profile.client.view.html",controller:"ProfilesController",controllerAs:"vm",resolve:{profileResolve:getProfile},data:{roles:["user","admin"],pageTitle:"Edit Profile {{ profileResolve.name }}"}}).state("profiles.view",{url:"/:profileId",templateUrl:"modules/profiles/client/views/view-profile.client.view.html",controller:"ProfilesController",controllerAs:"vm",resolve:{profileResolve:getProfile},data:{pageTitle:"Profile {{ profileResolve.name }}"}})}function getProfile($stateParams,ProfilesService){return ProfilesService.get({profileId:$stateParams.profileId}).$promise}function newProfile(ProfilesService){return new ProfilesService}angular.module("profiles").config(routeConfig),routeConfig.$inject=["$stateProvider"],getProfile.$inject=["$stateParams","ProfilesService"],newProfile.$inject=["ProfilesService"]}(),function(){function ProfilesListController(ProfilesService){var vm=this;vm.profiles=ProfilesService.query()}angular.module("profiles").controller("ProfilesListController",ProfilesListController),ProfilesListController.$inject=["ProfilesService"]}(),function(){function ProfilesController($scope,$state,$window,Authentication,profile){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.profile.$remove($state.go("profiles.list"))}function save(isValid){function successCallback(res){$state.go("profiles.view",{profileId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.profile._id?vm.profile.$update(successCallback,errorCallback):vm.profile.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.profileForm"),!1)}var vm=this;vm.authentication=Authentication,vm.profile=profile,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("profiles").controller("ProfilesController",ProfilesController),ProfilesController.$inject=["$scope","$state","$window","Authentication","profileResolve"]}(),function(){function ProfilesService($resource){return $resource("api/profiles/:profileId",{profileId:"@_id"},{update:{method:"PUT"}})}angular.module("profiles").factory("ProfilesService",ProfilesService),ProfilesService.$inject=["$resource"]}(),angular.module("replies").run(["Menus",function(Menus){}]),angular.module("replies").config(["$stateProvider",function($stateProvider){}]),angular.module("replies").controller("RepliesController",RepliesController),RepliesController.$inject=["$scope","$state","Authentication","Replies","RecursionHelper"],angular.module("replies").directive("showReplies",["RecursionHelper",function(RecursionHelper){return{restrict:"E",scope:!1,templateUrl:"/modules/replies/client/views/show-replies.client.view.html",compile:function(element){return RecursionHelper.compile(element)}}}]),angular.module("replies").factory("RecursionHelper",["$compile",function($compile){return{compile:function(element,link){angular.isFunction(link)&&(link={post:link});var compiledContents,contents=element.contents().remove();return{pre:link&&link.pre?link.pre:null,post:function(scope,element){compiledContents||(compiledContents=$compile(contents)),compiledContents(scope,function(clone){element.append(clone)}),link&&link.post&&link.post.apply(null,arguments)}}}}}]),angular.module("replies").factory("Replies",["$resource",function($resource){return $resource("api/replies/:replyId",{replyId:"@_id"},{get:{method:"GET",cache:!1},query:{method:"GET",cache:!1,isArray:!0},update:{method:"PUT"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){
return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);